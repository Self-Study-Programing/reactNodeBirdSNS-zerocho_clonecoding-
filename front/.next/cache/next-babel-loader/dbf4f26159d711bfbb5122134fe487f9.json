{"ast":null,"code":"import { all, call, fork, put, takeLatest, delay } from \"@redux-saga/core/effects\";\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from \"../reducers/user\";\n\nfunction logInAPI(data) {// return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {// return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {// return axios.post('/api/signup');\n}\n\nfunction* signUp() {\n  try {\n    // const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["/Users/seonghun/공부/웹/Nextjs/niselj/front/sagas/user.js"],"names":["all","call","fork","put","takeLatest","delay","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","logInAPI","data","logIn","action","type","err","error","response","logOutAPI","logOut","signUpAPI","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"AAAA,SACEA,GADF,EAEEC,IAFF,EAGEC,IAHF,EAIEC,GAJF,EAKEC,UALF,EAMEC,KANF,QAOO,0BAPP;AAQA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,EAOEC,eAPF,EAQEC,eARF,EASEC,eATF,QAUO,kBAVP;;AAYA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB,CACtB;AACD;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF;AACA,UAAMb,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEX,cADE;AAERQ,MAAAA,IAAI,EAAEE,MAAM,CAACF;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOI,GAAP,EAAY;AACZ,UAAMjB,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEb,cADE;AAERe,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaN;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,SAASO,SAAT,GAAqB,CACnB;AACD;;AAED,UAAUC,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMnB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAER;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAOS,GAAP,EAAY;AACZ,UAAMjB,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEV,eADE;AAERY,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaN;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,SAASS,SAAT,GAAqB,CACnB;AACD;;AAED,UAAUC,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMrB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEL;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAOM,GAAP,EAAY;AACZ,UAAMjB,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEP,eADE;AAERS,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaN;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,UAAUW,UAAV,GAAuB;AACrB,QAAMvB,UAAU,CAACG,cAAD,EAAiBU,KAAjB,CAAhB;AACD;;AAED,UAAUW,WAAV,GAAwB;AACtB,QAAMxB,UAAU,CAACM,eAAD,EAAkBc,MAAlB,CAAhB;AACD;;AAED,UAAUK,WAAV,GAAwB;AACtB,QAAMzB,UAAU,CAACS,eAAD,EAAkBa,MAAlB,CAAhB;AACD;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAM9B,GAAG,CAAC,CAACE,IAAI,CAACyB,UAAD,CAAL,EAAmBzB,IAAI,CAAC0B,WAAD,CAAvB,EAAsC1B,IAAI,CAAC2B,WAAD,CAA1C,CAAD,CAAT;AACD","sourcesContent":["import {\n  all,\n  call,\n  fork,\n  put,\n  takeLatest,\n  delay,\n} from \"@redux-saga/core/effects\";\nimport {\n  LOG_IN_FAILURE,\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_OUT_FAILURE,\n  LOG_OUT_REQUEST,\n  LOG_OUT_SUCCESS,\n  SIGN_UP_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n} from \"../reducers/user\";\n\nfunction logInAPI(data) {\n  // return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction logOutAPI() {\n  // return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction signUpAPI() {\n  // return axios.post('/api/signup');\n}\n\nfunction* signUp() {\n  try {\n    // const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}\n"]},"metadata":{},"sourceType":"module"}